{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Container inventory legacy app This project illustrates the integration of a legacy application with MQ and Kafka. The application manages the current container inventory for the shipment company, introduced in the end to end solution here. . We recommend readding the content from the book view. Component view The high level view of the components involved in the solution is illustrated in the figure below: On the left the container management microservice is implemented in a separate repository and supports the Reefer container event processing. In the current use case, this component id producing events to a containers topic defined in Kafka / Event Streams. One of those events will be container in maintenance and container out of maintenance. It is also interested to get new Reefer added to the inventory so it can assign order to container. On the right side the Inventory app is a JEE application maintenaining the container inventory. We did it in Java because we can partially reuse another code. But the most important thing, it is a legacy app, using MQ as communication layer. It could have been done in other language running on mainframe. This app is listening to MQ to get container maintenance messages, and publishes container added to the inventory message. The MQ source connector is a component that will get message from the queue, filter message only about Reefer and will mpa to a containerAdded event. This code is based on Event Stream MQ connector. The MQ sink connector is a component to preocess container events from Kafka topic, filter only the container on maitenance and off maintenance events and propagate them to MQ for down processing. Pre-requisites We assume we have the following pre-installed software: docker Sub projects The jee-inventory folder includes the Java based project for managing the container inventory. We make it very simple using maven and deployable on WebSphere or on Liberty. Build and run More readings Developing Java applications for MQ just got easier with Maven","title":"Introduction"},{"location":"#container-inventory-legacy-app","text":"This project illustrates the integration of a legacy application with MQ and Kafka. The application manages the current container inventory for the shipment company, introduced in the end to end solution here. . We recommend readding the content from the book view.","title":"Container inventory legacy app"},{"location":"#component-view","text":"The high level view of the components involved in the solution is illustrated in the figure below: On the left the container management microservice is implemented in a separate repository and supports the Reefer container event processing. In the current use case, this component id producing events to a containers topic defined in Kafka / Event Streams. One of those events will be container in maintenance and container out of maintenance. It is also interested to get new Reefer added to the inventory so it can assign order to container. On the right side the Inventory app is a JEE application maintenaining the container inventory. We did it in Java because we can partially reuse another code. But the most important thing, it is a legacy app, using MQ as communication layer. It could have been done in other language running on mainframe. This app is listening to MQ to get container maintenance messages, and publishes container added to the inventory message. The MQ source connector is a component that will get message from the queue, filter message only about Reefer and will mpa to a containerAdded event. This code is based on Event Stream MQ connector. The MQ sink connector is a component to preocess container events from Kafka topic, filter only the container on maitenance and off maintenance events and propagate them to MQ for down processing.","title":"Component view"},{"location":"#pre-requisites","text":"We assume we have the following pre-installed software: docker","title":"Pre-requisites"},{"location":"#sub-projects","text":"The jee-inventory folder includes the Java based project for managing the container inventory. We make it very simple using maven and deployable on WebSphere or on Liberty.","title":"Sub projects"},{"location":"#build-and-run","text":"","title":"Build and run"},{"location":"#more-readings","text":"Developing Java applications for MQ just got easier with Maven","title":"More readings"},{"location":"run-icp/","text":"Run on IBM Cloud Private","title":"Run on IBM Cloud private"},{"location":"run-icp/#run-on-ibm-cloud-private","text":"","title":"Run on IBM Cloud Private"},{"location":"run-local/","text":"Run Locally Running MQ with docker Prepare the MQ run time Attention : Queue manager and queue data are saved in the filesystem. To avoid losing the queue manager and queue data, we use docker volumes. Volumes are attached to containers when they are run and persist after the container is deleted. The following command creates a volume name qm1data $ docker volume create qm1data The remote MQ clients use a Channel to communicate with the MQ manager over the network. We need to create a virtual docker network to support this communication. The command below creates such network: $ docker network create mq-brown-network The scripts runMQlocal uses docker and the IBM MQ docker image to run MQ as a daemon.","title":"Run locally"},{"location":"run-local/#run-locally","text":"","title":"Run Locally"},{"location":"run-local/#running-mq-with-docker","text":"","title":"Running MQ with docker"},{"location":"run-local/#prepare-the-mq-run-time","text":"Attention : Queue manager and queue data are saved in the filesystem. To avoid losing the queue manager and queue data, we use docker volumes. Volumes are attached to containers when they are run and persist after the container is deleted. The following command creates a volume name qm1data $ docker volume create qm1data The remote MQ clients use a Channel to communicate with the MQ manager over the network. We need to create a virtual docker network to support this communication. The command below creates such network: $ docker network create mq-brown-network The scripts runMQlocal uses docker and the IBM MQ docker image to run MQ as a daemon.","title":"Prepare the MQ run time"}]}